name: Cleanup All Old Workflow Runs

on:
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Cleanup old workflow runs
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          python - <<EOF
          import requests
          import datetime
          from dateutil import parser

          # GitHub repository
          GITHUB_REPO = "${{ github.repository }}"

          def get_all_workflows():
              url = f"https://api.github.com/repos/{GITHUB_REPO}/actions/workflows"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.get(url, headers=headers)
              response.raise_for_status()
              return response.json()["workflows"]

          def get_workflow_runs(workflow_id):
              url = f"https://api.github.com/repos/{GITHUB_REPO}/actions/workflows/{workflow_id}/runs"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.get(url, headers=headers)
              response.raise_for_status()
              return response.json()["workflow_runs"]

          def delete_workflow_run(run_id):
              url = f"https://api.github.com/repos/{GITHUB_REPO}/actions/runs/{run_id}"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.delete(url, headers=headers)
              if response.status_code == 204:
                  print(f"Deleted workflow run {run_id}")
              else:
                  print(f"Failed to delete workflow run {run_id}: {response.status_code} - {response.text}")

          def cleanup_all_workflow_runs():
              workflows = get_all_workflows()
              now = datetime.datetime.utcnow()
              threshold = now - datetime.timedelta(hours=24)

              for workflow in workflows:
                  workflow_id = workflow["id"]
                  runs = get_workflow_runs(workflow_id)
                  for run in runs:
                      run_created_at = parser.parse(run["created_at"])
                      if run_created_at < threshold:
                          delete_workflow_run(run["id"])

          cleanup_all_workflow_runs()
          EOF
